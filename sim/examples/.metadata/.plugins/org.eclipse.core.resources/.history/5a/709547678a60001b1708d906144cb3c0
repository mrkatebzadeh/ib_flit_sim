//
// Generated file, do not edit! Created by opp_msgc 4.2 from ib.msg.
//

#ifndef _IB_M_H_
#define _IB_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

#define VERBOS 0

/**
 * Enum generated from <tt>ib.msg</tt> by opp_msgc.
 * <pre>
 * enum IB_MSGS
 * {
 *   IB_DATA_MSG     = 1; 
 *   IB_FLOWCTRL_MSG = 2; 
 *   IB_SENT_MSG     = 3; 
 *   IB_TXCRED_MSG   = 4; 
 *   IB_RXCRED_MSG   = 5; 
 *   IB_MINTIME_MSG  = 6; 
 *   IB_POP_MSG      = 7; 
 *   IB_HICCUP_MSG   = 8;
 *   IB_FREE_MSG     = 9;
 *   IB_DONE_MSG     = 10;
 *   IB_APP_MSG      = 11;
 *   IB_PUSH_MSG     = 12;
 *   IB_TQ_LOAD_MSG  = 13; 
 * }
 * </pre>
 */
enum IB_MSGS {
    IB_DATA_MSG = 1,
    IB_FLOWCTRL_MSG = 2,
    IB_SENT_MSG = 3,
    IB_TXCRED_MSG = 4,
    IB_RXCRED_MSG = 5,
    IB_MINTIME_MSG = 6,
    IB_POP_MSG = 7,
    IB_HICCUP_MSG = 8,
    IB_FREE_MSG = 9,
    IB_DONE_MSG = 10,
    IB_APP_MSG = 11,
    IB_PUSH_MSG = 12,
    IB_TQ_LOAD_MSG = 13
};

/**
 * Class generated from <tt>ib.msg</tt> by opp_msgc.
 * <pre>
 * message IBWireMsg extends cPacket
 * {
 *   short VL; 
 * }
 * </pre>
 */
class IBWireMsg : public ::cPacket
{
  protected:
    short VL_var;

  private:
    void copy(const IBWireMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IBWireMsg&);

  public:
    IBWireMsg(const char *name=NULL, int kind=0);
    IBWireMsg(const IBWireMsg& other);
    virtual ~IBWireMsg();
    IBWireMsg& operator=(const IBWireMsg& other);
    virtual IBWireMsg *dup() const {return new IBWireMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual short getVL() const;
    virtual void setVL(short VL);
};

inline void doPacking(cCommBuffer *b, IBWireMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IBWireMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ib.msg</tt> by opp_msgc.
 * <pre>
 * message IBDataMsg extends IBWireMsg
 * {
 *   int appIdx;           
 *   int msgIdx;           
 *   int msgLen;           
 *   int pktIdx;           
 *   int packetId;       	
 *   int packetSn;         
 *   int flitSn;       	
 *   int PacketLength;     
 *   int PacketLengthBytes;
 *   int dstLid;         	
 *   int srcLid;         	
 *   int SL;             	
 *   int useStatic;       	
 *   simtime_t SwTimeStamp;
 *   simtime_t injectionTime; 
 *   bool beforeAnySwitch; 
 * }
 * </pre>
 */
class IBDataMsg : public ::IBWireMsg
{
  protected:
    int appIdx_var;
    int msgIdx_var;
    int msgLen_var;
    int pktIdx_var;
    int packetId_var;
    int packetSn_var;
    int flitSn_var;
    int PacketLength_var;
    int PacketLengthBytes_var;
    int dstLid_var;
    int srcLid_var;
    int SL_var;
    int useStatic_var;
    simtime_t SwTimeStamp_var;
    simtime_t injectionTime_var;
    bool beforeAnySwitch_var;

  private:
    void copy(const IBDataMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IBDataMsg&);

  public:
    IBDataMsg(const char *name=NULL, int kind=0);
    IBDataMsg(const IBDataMsg& other);
    virtual ~IBDataMsg();
    IBDataMsg& operator=(const IBDataMsg& other);
    virtual IBDataMsg *dup() const {return new IBDataMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getAppIdx() const;
    virtual void setAppIdx(int appIdx);
    virtual int getMsgIdx() const;
    virtual void setMsgIdx(int msgIdx);
    virtual int getMsgLen() const;
    virtual void setMsgLen(int msgLen);
    virtual int getPktIdx() const;
    virtual void setPktIdx(int pktIdx);
    virtual int getPacketId() const;
    virtual void setPacketId(int packetId);
    virtual int getPacketSn() const;
    virtual void setPacketSn(int packetSn);
    virtual int getFlitSn() const;
    virtual void setFlitSn(int flitSn);
    virtual int getPacketLength() const;
    virtual void setPacketLength(int PacketLength);
    virtual int getPacketLengthBytes() const;
    virtual void setPacketLengthBytes(int PacketLengthBytes);
    virtual int getDstLid() const;
    virtual void setDstLid(int dstLid);
    virtual int getSrcLid() const;
    virtual void setSrcLid(int srcLid);
    virtual int getSL() const;
    virtual void setSL(int SL);
    virtual int getUseStatic() const;
    virtual void setUseStatic(int useStatic);
    virtual simtime_t getSwTimeStamp() const;
    virtual void setSwTimeStamp(simtime_t SwTimeStamp);
    virtual simtime_t getInjectionTime() const;
    virtual void setInjectionTime(simtime_t injectionTime);
    virtual bool getBeforeAnySwitch() const;
    virtual void setBeforeAnySwitch(bool beforeAnySwitch);
};

inline void doPacking(cCommBuffer *b, IBDataMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IBDataMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ib.msg</tt> by opp_msgc.
 * <pre>
 * message IBFlowControl extends IBWireMsg
 * {
 *   long FCTBS;
 *   long FCCL;
 * }
 * </pre>
 */
class IBFlowControl : public ::IBWireMsg
{
  protected:
    long FCTBS_var;
    long FCCL_var;

  private:
    void copy(const IBFlowControl& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IBFlowControl&);

  public:
    IBFlowControl(const char *name=NULL, int kind=0);
    IBFlowControl(const IBFlowControl& other);
    virtual ~IBFlowControl();
    IBFlowControl& operator=(const IBFlowControl& other);
    virtual IBFlowControl *dup() const {return new IBFlowControl(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual long getFCTBS() const;
    virtual void setFCTBS(long FCTBS);
    virtual long getFCCL() const;
    virtual void setFCCL(long FCCL);
};

inline void doPacking(cCommBuffer *b, IBFlowControl& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IBFlowControl& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ib.msg</tt> by opp_msgc.
 * <pre>
 * message IBTQLoadUpdateMsg extends IBWireMsg
 * {
 *   int load; 
 *   int srcRank;
 *   int firstLid; 
 *   int lastLid;
 * }
 * </pre>
 */
class IBTQLoadUpdateMsg : public ::IBWireMsg
{
  protected:
    int load_var;
    int srcRank_var;
    int firstLid_var;
    int lastLid_var;

  private:
    void copy(const IBTQLoadUpdateMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IBTQLoadUpdateMsg&);

  public:
    IBTQLoadUpdateMsg(const char *name=NULL, int kind=0);
    IBTQLoadUpdateMsg(const IBTQLoadUpdateMsg& other);
    virtual ~IBTQLoadUpdateMsg();
    IBTQLoadUpdateMsg& operator=(const IBTQLoadUpdateMsg& other);
    virtual IBTQLoadUpdateMsg *dup() const {return new IBTQLoadUpdateMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getLoad() const;
    virtual void setLoad(int load);
    virtual int getSrcRank() const;
    virtual void setSrcRank(int srcRank);
    virtual int getFirstLid() const;
    virtual void setFirstLid(int firstLid);
    virtual int getLastLid() const;
    virtual void setLastLid(int lastLid);
};

inline void doPacking(cCommBuffer *b, IBTQLoadUpdateMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IBTQLoadUpdateMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ib.msg</tt> by opp_msgc.
 * <pre>
 * message IBTxCredMsg extends cMessage
 * {
 *   int VL;
 *   long FCCL;
 *   long FCTBS;
 * }
 * </pre>
 */
class IBTxCredMsg : public ::cMessage
{
  protected:
    int VL_var;
    long FCCL_var;
    long FCTBS_var;

  private:
    void copy(const IBTxCredMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IBTxCredMsg&);

  public:
    IBTxCredMsg(const char *name=NULL, int kind=0);
    IBTxCredMsg(const IBTxCredMsg& other);
    virtual ~IBTxCredMsg();
    IBTxCredMsg& operator=(const IBTxCredMsg& other);
    virtual IBTxCredMsg *dup() const {return new IBTxCredMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getVL() const;
    virtual void setVL(int VL);
    virtual long getFCCL() const;
    virtual void setFCCL(long FCCL);
    virtual long getFCTBS() const;
    virtual void setFCTBS(long FCTBS);
};

inline void doPacking(cCommBuffer *b, IBTxCredMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IBTxCredMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ib.msg</tt> by opp_msgc.
 * <pre>
 * message IBRxCredMsg extends cMessage
 * {
 *   int VL;
 *   long FCCL;
 * }
 * </pre>
 */
class IBRxCredMsg : public ::cMessage
{
  protected:
    int VL_var;
    long FCCL_var;

  private:
    void copy(const IBRxCredMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IBRxCredMsg&);

  public:
    IBRxCredMsg(const char *name=NULL, int kind=0);
    IBRxCredMsg(const IBRxCredMsg& other);
    virtual ~IBRxCredMsg();
    IBRxCredMsg& operator=(const IBRxCredMsg& other);
    virtual IBRxCredMsg *dup() const {return new IBRxCredMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getVL() const;
    virtual void setVL(int VL);
    virtual long getFCCL() const;
    virtual void setFCCL(long FCCL);
};

inline void doPacking(cCommBuffer *b, IBRxCredMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IBRxCredMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ib.msg</tt> by opp_msgc.
 * <pre>
 * message IBSentMsg extends cMessage
 * {
 *   short VL;
 *   short usedStatic;
 *   short wasLast;
 * }
 * </pre>
 */
class IBSentMsg : public ::cMessage
{
  protected:
    short VL_var;
    short usedStatic_var;
    short wasLast_var;

  private:
    void copy(const IBSentMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IBSentMsg&);

  public:
    IBSentMsg(const char *name=NULL, int kind=0);
    IBSentMsg(const IBSentMsg& other);
    virtual ~IBSentMsg();
    IBSentMsg& operator=(const IBSentMsg& other);
    virtual IBSentMsg *dup() const {return new IBSentMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual short getVL() const;
    virtual void setVL(short VL);
    virtual short getUsedStatic() const;
    virtual void setUsedStatic(short usedStatic);
    virtual short getWasLast() const;
    virtual void setWasLast(short wasLast);
};

inline void doPacking(cCommBuffer *b, IBSentMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IBSentMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ib.msg</tt> by opp_msgc.
 * <pre>
 * message IBFreeMsg extends cMessage
 * {
 *   short VL;
 * }
 * </pre>
 */
class IBFreeMsg : public ::cMessage
{
  protected:
    short VL_var;

  private:
    void copy(const IBFreeMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IBFreeMsg&);

  public:
    IBFreeMsg(const char *name=NULL, int kind=0);
    IBFreeMsg(const IBFreeMsg& other);
    virtual ~IBFreeMsg();
    IBFreeMsg& operator=(const IBFreeMsg& other);
    virtual IBFreeMsg *dup() const {return new IBFreeMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual short getVL() const;
    virtual void setVL(short VL);
};

inline void doPacking(cCommBuffer *b, IBFreeMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IBFreeMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ib.msg</tt> by opp_msgc.
 * <pre>
 * message IBDoneMsg extends cMessage
 * {
 *   short VL;
 * }
 * </pre>
 */
class IBDoneMsg : public ::cMessage
{
  protected:
    short VL_var;

  private:
    void copy(const IBDoneMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IBDoneMsg&);

  public:
    IBDoneMsg(const char *name=NULL, int kind=0);
    IBDoneMsg(const IBDoneMsg& other);
    virtual ~IBDoneMsg();
    IBDoneMsg& operator=(const IBDoneMsg& other);
    virtual IBDoneMsg *dup() const {return new IBDoneMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual short getVL() const;
    virtual void setVL(short VL);
};

inline void doPacking(cCommBuffer *b, IBDoneMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IBDoneMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ib.msg</tt> by opp_msgc.
 * <pre>
 * message IBAppMsg extends cMessage
 * {
 *   unsigned int appIdx;   
 *   unsigned int msgIdx;   
 *   unsigned int SQ;       
 *   unsigned int lenBytes; 
 *   unsigned int lenPkts;  
 *   unsigned int dstLid;   
 *   unsigned int mtuBytes; 
 *   
 *   unsigned int pktLenFlits; 
 *   unsigned int pktLenBytes; 
 *   unsigned int pktIdx;   
 *   unsigned int flitIdx;  
 *   unsigned int VL;       
 * }
 * </pre>
 */
class IBAppMsg : public ::cMessage
{
  protected:
    unsigned int appIdx_var;
    unsigned int msgIdx_var;
    unsigned int SQ_var;
    unsigned int lenBytes_var;
    unsigned int lenPkts_var;
    unsigned int dstLid_var;
    unsigned int mtuBytes_var;
    unsigned int pktLenFlits_var;
    unsigned int pktLenBytes_var;
    unsigned int pktIdx_var;
    unsigned int flitIdx_var;
    unsigned int VL_var;

  private:
    void copy(const IBAppMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IBAppMsg&);

  public:
    IBAppMsg(const char *name=NULL, int kind=0);
    IBAppMsg(const IBAppMsg& other);
    virtual ~IBAppMsg();
    IBAppMsg& operator=(const IBAppMsg& other);
    virtual IBAppMsg *dup() const {return new IBAppMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getAppIdx() const;
    virtual void setAppIdx(unsigned int appIdx);
    virtual unsigned int getMsgIdx() const;
    virtual void setMsgIdx(unsigned int msgIdx);
    virtual unsigned int getSQ() const;
    virtual void setSQ(unsigned int SQ);
    virtual unsigned int getLenBytes() const;
    virtual void setLenBytes(unsigned int lenBytes);
    virtual unsigned int getLenPkts() const;
    virtual void setLenPkts(unsigned int lenPkts);
    virtual unsigned int getDstLid() const;
    virtual void setDstLid(unsigned int dstLid);
    virtual unsigned int getMtuBytes() const;
    virtual void setMtuBytes(unsigned int mtuBytes);
    virtual unsigned int getPktLenFlits() const;
    virtual void setPktLenFlits(unsigned int pktLenFlits);
    virtual unsigned int getPktLenBytes() const;
    virtual void setPktLenBytes(unsigned int pktLenBytes);
    virtual unsigned int getPktIdx() const;
    virtual void setPktIdx(unsigned int pktIdx);
    virtual unsigned int getFlitIdx() const;
    virtual void setFlitIdx(unsigned int flitIdx);
    virtual unsigned int getVL() const;
    virtual void setVL(unsigned int VL);
};

inline void doPacking(cCommBuffer *b, IBAppMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IBAppMsg& obj) {obj.parsimUnpack(b);}


#endif // _IB_M_H_
