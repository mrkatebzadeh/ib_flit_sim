%description:
Tests the expression evaluation class

%includes:
#include "expression.h"

%global:

class Variable : public Expression::Functor
{
  private:
    std::string varname;
  public:
    Variable(const char *name) {varname = name;}
    virtual ~Variable() { }
    virtual Expression::Functor *dup() const {return new Variable(varname.c_str());}
    virtual const char *getName() const {return varname.c_str();}
    virtual const char *getArgTypes() const {return "";}
    virtual char getReturnType() const {return Expression::Value::DBL;}
    virtual Expression::Value evaluate(Expression::Value args[], int numargs) {return (double)(varname[1]-'0');}
    virtual std::string str(std::string args[], int numargs) {return getName();}
};

class Resolver : public Expression::Resolver
{
  public:
    virtual Expression::Functor *resolveVariable(const char *varname);
    virtual Expression::Functor *resolveFunction(const char *funcname, int argcount);
};

Expression::Functor *Resolver::resolveVariable(const char *varname)
{
    return new Variable(varname);
}

Expression::Functor *Resolver::resolveFunction(const char *funcname, int argcount)
{
    if (MathFunction::supports(funcname))
        return new MathFunction(funcname);
    else
        throw opp_runtime_error("Unrecognized function: %s()", funcname);
}

static void eval(const char *txt, char type)
{
    try {
        ev << txt << " -> ";
        Expression expr;
        Resolver resolver;
        expr.parse(txt, &resolver);
        switch (type) {
          case 'B': ev << (expr.boolValue()?"true":"false"); break;
          case 'D': ev << expr.doubleValue(); break;
          case 'S': ev << expr.stringValue(); break;
        }
        ev << "\n";
    }
    catch (std::exception& e) {
        ev << "exception\n";  // e.what() << "\n";
    }
}

static void evalAsBool(const char *txt)   {eval(txt, 'B');}
static void evalAsDouble(const char *txt) {eval(txt, 'D');}
static void evalAsString(const char *txt) {eval(txt, 'S');}

%activity:
evalAsDouble("3+2");
evalAsDouble("3+2*5");
evalAsDouble("(3+2)*5");
evalAsDouble("a1");
evalAsDouble("a2");
evalAsDouble("a3");
evalAsDouble("a1+a2+a3");
evalAsDouble("fabs(-3.14)");
evalAsDouble("pow(2,8)");

evalAsBool("true");
evalAsBool("false");
evalAsBool("1 < 3");
evalAsString("1 < 3 ? \"lt\" : \"gt\"");
//TODO many more tests needed, for all operators, precedence rules, etc

ev << ".\n";

%exitcode: 0

%contains: stdout
3+2 -> 5
3+2*5 -> 13
(3+2)*5 -> 25
a1 -> 1
a2 -> 2
a3 -> 3
a1+a2+a3 -> 6
fabs(-3.14) -> 3.14
pow(2,8) -> 256
true -> true
false -> false
1 < 3 -> true
1 < 3 ? "lt" : "gt" -> lt
.

